version: '3'

services:
  nginx:
    image: nginx:1.25
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./staticfiles:/static/
    depends_on:
      - web
    restart: always
    networks:
      - backend

  db:
    image: postgres:16.3-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_DB_USER}
      POSTGRES_DB: ${POSTGRES_DB_NAME}
      POSTGRES_PASSWORD: ${POSTGRES_DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend

  web:
    build: .
    command: >
      sh -c "./wait-for-it.sh db:5432 -- ./wait-for-it.sh rabbitmq:5672 -- python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn task_manager.wsgi:application --bind 0.0.0.0:8000"
    restart: always
    volumes:
      - .:/app
    env_file:
      - ./.env
    expose:
      - "8000"
    environment:
      - DJANGO_SETTINGS_MODULE=task_manager.settings
      - POSTGRES_USER=${POSTGRES_DB_USER}
      - POSTGRES_PASSWORD=${POSTGRES_DB_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB_NAME}
    depends_on:
      - db
      - rabbitmq
    networks:
      - backend

  worker:
    build: .
    command: ["python", "tasks/worker.py"]
    volumes:
      - .:/app
    depends_on:
      - db
      - rabbitmq
    networks:
      - backend

volumes:
  postgres_data:
  rabbitmq_data:

networks:
  backend: